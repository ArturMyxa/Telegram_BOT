import telebot
import random
from telebot import types
import sqlalchemy
from sqlalchemy.orm import sessionmaker
from db_models import create_tables, Word, User, UserWord
from create_db import get_default_words

# –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
TOKEN = '8195536784:AAFc53C-fbCAgXM3Vbbonxa9ov-fdyOisUA'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = telebot.TeleBot(TOKEN)
engine = sqlalchemy.create_engine("postgresql://postgres:5555@localhost:5432/tgbot")
Session = sessionmaker(bind=engine)
create_tables(engine)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
session_data = {}

def get_session():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
    return Session()

def user_list():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with get_session() as session:
        users = session.query(User).all()
        return [user.cid for user in users]

def add_users(user_id):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ª–æ–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    with get_session() as session:
        existing_user = session.query(User).filter_by(cid=user_id).first()
        if not existing_user:
            new_user = User(cid=user_id)
            session.add(new_user)
            session.commit()

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id_db = session.query(User.id).filter(User.cid == user_id).first()[0]

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            default_words = get_default_words()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü—É user_word
            user_words = [UserWord(word=word, translate=translate, id_user=user_id_db) for word, translate in default_words]
            session.add_all(user_words)
            session.commit()

def get_words(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_session() as session:
        return session.query(UserWord.word, UserWord.translate) \
            .join(User, User.id == UserWord.id_user) \
            .filter(User.cid == user_id).all()

def add_words(cid, word, translate):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    with get_session() as session:
        id_user = session.query(User.id).filter(User.cid == cid).first()
        if id_user:
            session.add(UserWord(word=word, translate=translate, id_user=id_user[0]))
            session.commit()

def delete_words(cid, word):
    """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_session() as session:
        id_user = session.query(User.id).filter(User.cid == cid).first()
        if id_user:
            session.query(UserWord).filter_by(id_user=id_user[0], word=word).delete()
            session.commit()

known_users = user_list()
print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(known_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

welcome_text = '''–ü—Ä–∏–≤–µ—Ç üëã
–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞, —É–¥–∞–ª—è—Ç—å –∏—Ö –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤—ã–±–∏—Ä–∞—è –ø–µ—Ä–µ–≤–æ–¥.
–ù–∞—á–Ω—ë–º?'''

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    BACK = '–ù–∞–∑–∞–¥'

def create_markup(buttons):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start', 'cards'])
def create_cards(message):
    """–°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    cid = message.chat.id

    if cid not in known_users:
        known_users.append(cid)
        add_users(cid)
        bot.send_message(cid, welcome_text)

    user_words = get_words(cid)

    if len(user_words) < 4:
        buttons = [types.KeyboardButton(Command.ADD_WORD)]
        markup = create_markup(buttons)
        bot.send_message(cid, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤.", reply_markup=markup)
        return

    random_words = random.sample(user_words, 4)
    target_word = random_words[0]

    direction = random.choice(['en_to_ru', 'ru_to_en'])
    if direction == 'en_to_ru':
        question_text = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: '{target_word[0]}'"
        correct_translation = target_word[1]
        options = [word[1] for word in random_words]
    else:
        question_text = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: '{target_word[1]}'"
        correct_translation = target_word[0]
        options = [word[0] for word in random_words]

    session_data[cid] = {
        'correct_translation': correct_translation.strip().lower()
    }

    buttons = [types.KeyboardButton(option) for option in options]
    random.shuffle(buttons)
    buttons += [
        types.KeyboardButton(Command.NEXT),
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD)
    ]
    markup = create_markup(buttons)
    bot.send_message(cid, question_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def handle_next(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ'"""
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word_handler(message):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    cid = message.chat.id
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    session_data[cid] = {"state": "awaiting_english_word"}

@bot.message_handler(func=lambda message: session_data.get(message.chat.id, {}).get("state") == "awaiting_english_word")
def get_english_word(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥"""
    cid = message.chat.id
    session_data[cid]["english_word"] = message.text.strip()
    session_data[cid]["state"] = "awaiting_russian_translation"
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")

@bot.message_handler(func=lambda message: session_data.get(message.chat.id, {}).get("state") == "awaiting_russian_translation")
def get_russian_translation(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    cid = message.chat.id
    russian_word = message.text.strip()
    english_word = session_data[cid].get("english_word")

    if english_word and russian_word:
        add_words(cid, english_word, russian_word)
        bot.send_message(cid, f"–°–ª–æ–≤–æ '{english_word}' -> '{russian_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(cid, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    session_data.pop(cid, None)
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word_handler(message):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    cid = message.chat.id
    user_words = get_words(cid)

    if not user_words:
        bot.send_message(cid, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(word[0]) for word in user_words]
    buttons.append(types.KeyboardButton(Command.BACK))
    markup.add(*buttons)
    bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥':", reply_markup=markup)
    session_data[cid] = {"state": "awaiting_word_deletion"}

@bot.message_handler(func=lambda message: session_data.get(message.chat.id, {}).get("state") == "awaiting_word_deletion")
def handle_word_deletion(message):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤–æ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–∞–¥"""
    cid = message.chat.id
    word_to_delete = message.text.strip()

    if word_to_delete == Command.BACK:
        bot.send_message(cid, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.")
        session_data.pop(cid, None)
        create_cards(message)
        return

    delete_words(cid, word_to_delete)
    bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_to_delete}' —É–¥–∞–ª–µ–Ω–æ.")
    session_data.pop(cid, None)
    create_cards(message)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_translation_check(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cid = message.chat.id
    user_choice = message.text.strip().lower()

    data = session_data.get(cid)
    if not data:
        bot.send_message(cid, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        create_cards(message)
        return

    correct_translation = data['correct_translation']

    if user_choice == correct_translation:
        bot.send_message(cid, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(cid, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_translation.capitalize()}'.")

    create_cards(message)

bot.infinity_polling(skip_pending=True)
